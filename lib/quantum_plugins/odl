# Quantum OpenDaylight plugin
# ------------------

# Save trace setting
MY_XTRACE=$(set +o | grep xtrace)
set +o xtrace

source $TOP_DIR/lib/quantum_plugins/ovs_base
source $TOP_DIR/lib/quantum_thirdparty/odl	# for configuration value

function quantum_plugin_create_nova_conf() {
    _quantum_ovs_base_configure_nova_vif_driver
    iniset $NOVA_CONF DEFAULT libvirt_ovs_integration_bridge "$OVS_BRIDGE"
}

function quantum_plugin_install_agent_packages() {
    _quantum_ovs_base_install_agent_packages
}

function quantum_plugin_configure_common() {
    Q_PLUGIN_CONF_PATH=etc/quantum/plugins/odl
    Q_PLUGIN_CONF_FILENAME=odl.ini
    Q_DB_NAME="ovs_quantum"
    Q_PLUGIN_CLASS="quantum.plugins.opendaylight.odl_quantum_plugin.ODLQuantumPlugin"
}

function quantum_plugin_configure_debug_command() {
    _quantum_ovs_base_configure_debug_command
}

function quantum_plugin_configure_dhcp_agent() {
    :
}

function quantum_plugin_configure_l3_agent() {
    _quantum_ovs_base_configure_l3_agent
}

function quantum_plugin_configure_plugin_agent() {
    # Set up integration bridge
    OVS_BRIDGE=${OVS_BRIDGE:-br-int}
    _quantum_ovs_base_setup_bridge $OVS_BRIDGE
    iniset /$Q_PLUGIN_CONF_FILE ODL controllers $ODL_CONTROLLERS
    iniset /$Q_PLUGIN_CONF_FILE ODL integration_bridge $OVS_BRIDGE
    AGENT_BINARY="$QUANTUM_DIR/quantum/plugins/opendaylight/agent/odl_quantum_agent.py"

    _quantum_ovs_base_configure_firewall_driver
}

function quantum_plugin_configure_service() {
    :
}

function quantum_plugin_setup_interface_driver() {
    local conf_file=$1
    iniset $conf_file DEFAULT interface_driver quantum.agent.linux.interface.OVSInterfaceDriver
    iniset $conf_file DEFAULT ovs_use_veth True
}

function has_quantum_plugin_security_group() {
    # 0 means True here
    return 0
}

# Restore xtrace
$MY_XTRACE
