# Cisco router service plugin
# ---------------------------

# Save trace setting
MY_XTRACE=$(set +o | grep xtrace)
set +o xtrace

# lines in neutron-legacy that need to be changed to be compatible with cisco router plugin
TO_REPLACE[0]=$(cat <<'EOF'
ROUTER_GW_IP=`neutron port-list -c fixed_ips -c device_owner | grep router_gateway | awk -F '"' -v subnet_id=$PUB_SUBNET_ID '$4 == subnet_id { print $8; }'`;
EOF
)
TO_REPLACE[1]=$(cat <<'EOF'
IPV6_ROUTER_GW_IP=`neutron port-list -c fixed_ips | grep $ipv6_pub_subnet_id | awk -F '"' -v subnet_id=$ipv6_pub_subnet_id '$4 == subnet_id { print $8; }'`;
EOF
)

REPLACE_WITH[0]=$(cat <<'EOF'
ROUTER_GW_IP=`neutron port-list -c fixed_ips -c device_owner -c device_id | awk -F '|' -v router_id=$ROUTER_ID -v subnet_id=$PUB_SUBNET_ID '/gateway/ { gsub(" ", "", $4); if ($4 == router_id) { split($2, res, "\\\""); if (res[4] == subnet_id) print res[8]; } }'`;
EOF
)
REPLACE_WITH[1]=$(cat <<'EOF'
IPV6_ROUTER_GW_IP=`neutron port-list -c fixed_ips -c device_id | awk -F '|' -v router_id=$ROUTER_ID -v subnet_id=$ipv6_pub_subnet_id '{ gsub(" ", "", $3); if ($3 == router_id) { split($2, res, "\\\""); if (res[4] == subnet_id) print res[8]; } }'`;
EOF
)

CISCO_ROUTER_PLUGIN=neutron.plugins.cisco.service_plugins.cisco_router_plugin.CiscoRouterPlugin
Q_CISCO_DEFAULT_ROUTER_TYPE=${Q_CISCO_DEFAULT_ROUTER_TYPE:-CSR1kv_router}

function neutron_cisco_router_configure_common() {
    Q_L3_ENABLED=True
    Q_L3_ROUTER_PER_TENANT=True

    if [[ $Q_PLUGIN != "ml2" ]]; then 
        # Temporarily adding device manager to service plugin list here to ensure proper ordering.
        # If plugin is ml2 we instead add device manager by specifying it as the L3 router plugin 
        # that ml2 devstack script configures.
        Q_CISCO_DEVICE_MANAGER_PLUGIN=neutron.plugins.cisco.service_plugins.cisco_device_manager_plugin.CiscoDeviceManagerPlugin
        _neutron_service_plugin_class_add $Q_CISCO_DEVICE_MANAGER_PLUGIN
    fi

    _neutron_service_plugin_class_add $CISCO_ROUTER_PLUGIN

    CISCO_ROUTER_PLUGIN_CONFIG_DIR=$NEUTRON_CONF_DIR/plugins/cisco
    mkdir -p $CISCO_ROUTER_PLUGIN_CONFIG_DIR
    Q_CISCO_ROUTER_PLUGIN_CONF_FILE=$CISCO_ROUTER_PLUGIN_CONFIG_DIR/cisco_router_plugin.ini
    cp $NEUTRON_DIR/etc/neutron/plugins/cisco/cisco_router_plugin.ini $Q_CISCO_ROUTER_PLUGIN_CONF_FILE
    Q_PLUGIN_EXTRA_CONF_FILES=(${Q_PLUGIN_EXTRA_CONF_FILES[@]} $Q_CISCO_ROUTER_PLUGIN_CONF_FILE)

    CISCO_INJECT_FILE=$TOP_DIR/cisco_router_plugin.inject
    # inject any deployer provided configurations
    if [[ -f $CISCO_INJECT_FILE ]]; then
        cat $CISCO_INJECT_FILE >> $Q_CISCO_ROUTER_PLUGIN_CONF_FILE
    fi 

    iniset $Q_CISCO_ROUTER_PLUGIN_CONF_FILE routing default_router_type $Q_CISCO_DEFAULT_ROUTER_TYPE

     # Redefine functions in neutron-legacy that configure v4 and v6 routers so gateway ip is determined in a way compatible with our plugin
     original_definition=$(declare -f _neutron_configure_router_v4)
     new_definition=$(echo "$original_definition" | awk -v to_replace="${TO_REPLACE[0]}" -v replace_with="${REPLACE_WITH[0]}" '{ match($0, /^ */); if (substr($0, RLENGTH+1) == to_replace) print substr($0, 1, RLENGTH)replace_with; else print $0; }')
     eval "$new_definition"
     original_definition=$(declare -f _neutron_configure_router_v6)
     new_definition=$(echo "$original_definition" | awk -v to_replace="${TO_REPLACE[1]}" -v replace_with="${REPLACE_WITH[1]}" '{ match($0, /^ */); if (substr($0, RLENGTH+1) == to_replace) print substr($0, 1, RLENGTH)replace_with; else print $0; }')
     eval "$new_definition"
}

#function neutron_cisco_router_configure_driver() {
#    :
#}

function neutron_cisco_router_stop() {
    :
}

# Restore xtrace
$MY_XTRACE
