#!/usr/bin/env bash

# Make sure we include all functions and configurations.
TOP_DIR=$(cd $(dirname "$0") && pwd)
source $TOP_DIR/functions
source $TOP_DIR/stackrc
DEST=${DEST:-/opt/stack}
source $TOP_DIR/openrc admin

# We turn off the compute service on the Controller node so VMs are not deployed there.
# Currently, 'disable_service n-cpu' in localrc breaks horizon and nova cli.'
echo "Disabling nova-compute so no VMs will run on Controller."
attempts=0
comp_running=`nova service-list | awk '/nova-compute.*Controller/ { print $8; }'` 
while [ "$comp_running" == "enabled" ]
do
    # DISABLED SINCE SEEMS BROKEN: nova service-disable Controller nova-compute
    nova-manage service disable --host=Controller --service=nova-compute
    sleep 0.5
    attempts=$((attempts + 1))
    comp_running=`nova service-list | awk '/nova-compute.*Controller/ { print $8; }'` 
    if [ "$comp_running" == "enabled" -a $attempts -gt 2 ]; then
        echo "Failed $attempts attempts to disable nova-compute. Giving up!"
        break
    fi
done

echo "Creating a private network and an external network with a router gateway."
# If the l3 agent does not run on the controller (but on the Network node as we want it) 
# we create the router that the stack.sh script creates by default when the l3 agent does 
# run on the Controller node. The code below is basically a copy of the code in stack.sh.
if (! is_service_enabled q_l3) && (is_service_enabled q-svc); then 
    TENANT_ID=$(keystone tenant-list | grep " demo " | get_field 1)
    SUBNET_ID=$(quantum subnet-list | grep $FIXED_RANGE | get_field 1)

    # Create a router, and add the private subnet as one of its interfaces
    ROUTER_ID=$(quantum router-create --tenant_id $TENANT_ID router1 | grep ' id ' | get_field 2)
    quantum router-interface-add $ROUTER_ID $SUBNET_ID
    # Create an external network, and a subnet. Configure the external network as router gw
    EXT_NET_ID=$(quantum net-create ext_net -- --router:external=True | grep ' id ' | get_field 2)
    EXT_GW_IP=$(quantum subnet-create --ip_version 4 $EXT_NET_ID $FLOATING_RANGE -- --enable_dhcp=False | grep 'gateway_ip' | get_field 2)
    quantum router-gateway-set $ROUTER_ID $EXT_NET_ID
fi
